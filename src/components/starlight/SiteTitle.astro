---
import type { Props } from "@astrojs/starlight/props";
import AstrolightSiteTitle from "@astrojs/starlight/components/SiteTitle.astro";

const menuItems = [
  { 
    name: { 'en-US': "Docs", 'zh-CN': '文档' },
    id: 'docs',
    href: { 'en-US': "/core-concepts/why-volar", 'zh-CN': "/zh-cn/core-concepts/why-volar" }
  },
  { 
    name: { 'en-US': "Blog", 'zh-CN': '博客' },
    id: 'blog',
    href: { 'en-US': "/blog", 'zh-CN': "/blog" }
  },
];
type DefinedI18nName = keyof typeof menuItems[number]['name']
type DefinedHref = keyof typeof menuItems[number]['href'];

function pathsMatch(pathA: string, pathB: string): boolean {
  return pathB.includes(pathA);
}
---

<div>
  <AstrolightSiteTitle {...Astro.props} />

  <div class="sl-hidden separator"></div>

  <div class="sl-hidden menu-items">
    {
      menuItems.map((menuItem) => (
        <a
          href={menuItem.href[Astro.currentLocale as DefinedHref] || menuItem.href['en-US']}
          aria-current={
            (pathsMatch(encodeURI(menuItem.href[Astro.currentLocale as DefinedHref] || menuItem.href['en-US']), Astro.url.pathname) ||
              (menuItem.id === "Docs" && Astro.props.hasSidebar)) &&
            "page"
          }
        >
          <span>{menuItem.name[Astro.currentLocale as DefinedI18nName] || menuItem.name['en-US']}</span>
        </a>
      ))
    }
  </div>
</div>

<style>
  div {
    display: flex;
    gap: var(--sl-content-pad-x);
    align-items: center;
  }

  div.separator {
    content: "";
    height: 2rem;
    border-inline-end: 1px solid var(--sl-color-gray-5);
  }

  div a {
    text-decoration: none;
    color: var(--sl-color-white);
    font-size: var(--sl-text-base);
    font-weight: 500;
  }

  div a:hover {
    color: var(--sl-color-text-accent);
  }

  [aria-current="page"],
  [aria-current="page"]:hover,
  [aria-current="page"]:focus {
    color: var(--sl-color-text-accent);
  }

  @media (min-width: 50rem) {
    .menu-items {
      display: flex;
    }
    .separator {
      display: block;
    }
  }
</style>
